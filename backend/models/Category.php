<?php

namespace backend\models;

use Yii;

use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use yii\db\Expression;
use yii\behaviors\SluggableBehavior;
use yii\helpers\Inflector;
use yii\web\UploadedFile;

/**
 * This is the model class for table "category".
 *
 * @property int $id
 * @property int $parent_id
 * @property int $created_at
 * @property int $updated_at
 * @property string $name
 * @property string $content
 * @property string $characteristics
 * @property string|null $keywords
 * @property string|null $description
 */
class Category extends \yii\db\ActiveRecord
{
    public $imageFile;
    public $imageFiles;

    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['created_at', 'updated_at'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['updated_at'],
                ],
                // если вместо метки времени UNIX используется datetime:
                'value' => new Expression('NOW()'),
            ],
            [
                //включить intl  в php
                'class' => SluggableBehavior::className(),
                'attribute' => null,
                'slugAttribute' => 'slug',
                //'immutable' => true,//неизменный
                //'ensureUnique'=>true,//генерировать уникальный
                'value' => function ($event) {
                    $sourceLanguage = Yii::$app->sourceLanguage;
                    $name =  unserialize($this->owner->name)[$sourceLanguage];
                    $slugParts = str_replace(' ', '-', $name);
                    $slugParts = mb_convert_encoding ($slugParts, 'UTF-8');
                    $slug = Inflector::slug($slugParts, '-',true);
                    //dd(mb_detect_encoding($slugParts) );
                    //dd($slug);
                    return $slug;
                }
            ],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'category';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['parent_id'], 'integer'],
            [['name'], 'required'],
            [['name', 'keywords', 'description','gallery','img','content'], 'string'],
            [['created_at', 'updated_at','slug'], 'safe'],
            [['imageFile'], 'file', 'skipOnEmpty' => true, 'extensions' => 'png, jpg, jpeg, gif'],
            [['imageFiles'], 'file', 'skipOnEmpty' => true, 'extensions' => 'png, jpg, jpeg, gif', 'maxFiles' => 10],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'parent_id' => 'Категория',
            'name' => 'Имя',
            'content' => 'Описание',
            'keywords' => 'Ключивые слова',
            'description' => 'Ключивое описание',
            'slug' => 'Url',
            'imageFile' => 'Основной рисунок',
            'imageFiles' => 'Галерея',
            'img' => 'Рисунок',
            'gallery' => 'Галерея',
            'characteristics' => 'Характеристики',
        ];
    }

    public function getCategory() {
        return $this->hasOne(Category::className(),['id'=>'parent_id']);
    }

    public function beforeSave($insert)
    {
        if ($file = UploadedFile::getInstance($this, 'imageFile')) {
            $dir = '../../frontend/web/uploads/category/' . date("Y_m_d") . '/';
            if (!is_dir($dir)) {
                mkdir($dir, 0777, true);
            }
            $file_name = uniqid() . '_' . $file->baseName . '.' . $file->extension;
            $path = '/uploads/category/' . date("Y_m_d") . '/';
            $this->img = $path . $file_name;
            $file->saveAs($dir . $file_name);

        }
        if ($files = UploadedFile::getInstances($this, 'imageFiles')) {
            $dir = '../../frontend/web/uploads/category/' . date("Y_m_d") . '/';
            if (!is_dir($dir)) {
                mkdir($dir, 0777, true);
            }
            $path = '/uploads/category/' . date("Y_m_d") . '/';
            foreach ($files as $file) {
                $file_name = uniqid() . '_' . $file->baseName . '.' . $file->extension;
                $this->img = $path . $file_name;
                $file->saveAs($dir . $file_name);
                $new_path[] = $this->img;
            }
            $this->gallery = serialize($new_path);
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
}
